desc: FriGate 0v2  [mrelwood]

// TODO:
Pre-Close




slider1:0<0,4,1{In L+R,In L,in R,Sidechain Ch3,Sidechain Ch4}>-Gate Opening Source
slider2:-30<-60,0,.1>-Open Threshold (dB)
slider3:0<0,1,.01>-PreOpen
slider4:.08<0,1,.01>-Open Slope

slider7:1<0,1,1{Close,Open}>-Priority

slider10:0<0,1,1{-,Inverse}>-Inverse source

slider11:6<0,8,1{In L+R,In L,in R,Sidechain Ch3+Ch4,Ch 3,Ch 4,Follow Open,Duration (ms),Duration (musical)}>-Gate Closing Source
slider12:-24<-60,0,.1>-Sidechain Threshold (dB)
slider13:.3163<0,1,.01>-Keep Open (ms)
slider14:3<0,5,1{1/32,1/16,1/8,1/4,1/2,1/1}>-Keep Open (musical)
//slider15:0<0,2,1{-,x 0.75,x 0.66}>-Multiplier
slider15:1<.5,1.5.01>-Trim
slider16:.3163<0,1,.01>-Keep Closed (ms)

slider17:-6<-24,24,.1>-Hysteresis (dB)
slider18:.2237<0,1,.01>-Close Slope
slider19:24<0,60,.1>-Cut Range (dB)

slider30:0<0,1,.01>-Tmp


@init

devmode = 0;
gfxini = 1;

pdc_bot_ch = 0;
pdc_top_ch = 2;

// BUFFERS
mxoff = 0; // 
myoff = mxoff + 100;
choose = myoff +100;
areaw = choose +100;

buf = areaw +100; // last
 

/*
z = 0;
loop(10,
  areaw[z] = 0;
  z += 1;
);
*/


function float(in)
  instance(ina inao indir indiro flt fltc hold)(
  
  indiro = indir;
  ina = abs(in);
  indir = ina-inao;
  inao = ina;
  
  indiro <= 0 && indir > 0 && ina < .01 ? hold = ina : hold = max(hold*.9994,ina);
  
  
  hold >= flt  ? (
    hold > flt ? flt += (hold-flt) *.07;
    fltc = 0;
//    prev = 0;
  ):(
//    ina > flt*.5 ? prev = max(prev,ina) : prev /= max(1,flt/prev);
//    ina > flt * .8 ? fltc /= 1+ max(0, ina-flt)/.2 * .1;
//    indir > 0 && ina > flt * .5 ? fltc /= 1+ (tmp= max(0, ina-flt*.5)/.2) *tmp*tmp *.1;
    fltc += 1 ;//+ max(0, fltc/(srate*.02) );
    
//    flt /= 1.0003+ max(0, fltc-1) * .000001;
//    flt -= (flt-ina) * (.0007 + max(0, fltc-1) * .000001 );
//    flt -= (flt-ina) * (.0002 + max(0, fltc-1) * .0000001 );
    flt -= (flt-hold) * (.001 + max(0, fltc-srate*.001) * .000003 * (indir <= 0) );
  );
  
  
  flt;
);

/*    
function float_old(in)
  instance(ina flt fltrelc flthold fltrel)(
  ina = abs(in);
  ina >= flt ? (
    flt += (ina-flt) *.2;
    fltrelc = 0;
  ):(
    fltrelc += 1;
    fltrel = min(3, (flttmp = max(0, fltrelc - flthold) / flthold) );
    flt -= (flt) * (fltrel +.2) *.0002;
  );
);    
*/


function meterengine(in in2 loga)
  instance(rst val valR)(

  this.loga = loga;
//  in > val ? val = in;
  val = max(val,in);
  in2 != -99 ? valR = max(valR,in2);
  
  rst > 0 ? (
    val = in;
    in2 != -99 ? valR = in2;
    rst = 0;
  );
);

function osos(in)
  instance(cnt size prev msr curr)(

  this.rst > 0 ? (
    this.rst = 0;
    size = cnt;
    cnt = 0;
    curr = 0;
  );

  curr = max(in , curr);
  
  (cnt += 1) == floor(size*.5) ? (
    prev = curr;
  );

  curr;
);



function upsli()(


  _thr += 1;
  
  opnthr = 2^(slider2/6);
  opnsrc = slider1;
  buflen = floor( (buflenms = prems = slider3^2 * 400) /1000 *srate );
  buflen > 0 ? (
    pdc_delay = buflen;
    mtrdel = samplesblock + buflen;
    
  ):(
    buflen = 0;
    mtrdel = samplesblock;
  );
    
  
  prio = slider7;
  
  
  keepnote = slider14;
//  keepnotemul = slider15;
  trim = slider15;
  
//  clsspd = slider18^2 * srate;
  clssrc = slider11;
  //clssrc2 = slider8;
  clssrc == 8 ? (
    
//    keepspl = (srate *(.98) -clsspd*.75 )/(tempo/60/4) / 2^(keepnote);
    keepspl = (srate *(.98) -clsspd*.75 )/(tempo/60/4) / 2^(keepnote) * trim;
//    keepnotemul == 1 ? keepspl *= .77;
//    keepnotemul == 2 ? keepspl *= .67;
  ):(
    keepspl = slider13^2 * srate;
  );
  // Close Threshold
  clssrc >= 6 ? clsthr = opnthr * 2^(slider17/6) :
  (clssrc != opnsrc) && (clssrc >= 3 || clssrc <= 5) ? clsthr = 2^(slider12/6) :
//  _clsthr  = clsthr;
  clsthr = 2^((slider2+slider17)/6);

  opnsrc == clssrc || clssrc == 6 ? clsinv = 1 : clsinv = slider10;
  
  randb = slider19;
  ran = 2^(randb/6);
  
  opnms = slider4^3 * 200;
  clsms = slider18^2 * 1000;
  keepcls = (keepclsms = slider16^2 * 1000) /1000 * srate;

  // Slope/12dB
  opnspl = 12/(1+ opnms/1000 * srate); // 12dB/samples
  clsspl = 12/(1+ clsms/1000 * srate); // 12dB/samples

  // Slope to 0dB
//  opnspl = randb/(1+ opnms/1000 * srate); // 12dB/samples
//  clsspl = randb/(1+ clsms/1000 * srate); // 12dB/samples

  
  keepms = keepspl/srate*1000;
  
  flthold = srate/100 ;
  
  opnthrypos = (1-(log10(opnthr)*19.93 + dbran)/dbran) *osh2;
  
  osmkmax = srate * 60 / tempo;
  btoff = (buflen+samplesblock)/osmkmax;
  
  
  willslimate = 1;
  
  
);

@serialize
store_01 = file_var(0, graphena);



@slider

upsli();


@block

@sample

// METER BLOCK SIZE

bufm = buf + buflen *2;

gfx == 1 ? (
  spl0i = spl0;
  spl1i = spl1;
  spl2i = spl2;
  spl3i = spl3;
);
/*
in12.meterengine( abs(spl0),abs(spl1) ,1);
in3.meterengine(abs(spl2),-99,1);
in4.meterengine(abs(spl3),-99,1);
*/


//clsinmtr = max(clsinmtr,abs(clsin));
  

opnsrc == 0 ? opnin = max(abs(spl0),abs(spl1)) :
opnsrc == 1 ? opnin = abs(spl0) :
opnsrc == 2 ? opnin = abs(spl1) :
opnsrc == 3 ? opnin = max( abs(spl2), abs(spl3) ) :
opnsrc == 4 ? opnin = abs(spl2) :
opnsrc == 5 ? opnin = abs(spl3) :
opnin = 0;

clssrc == 0 ? clsin = max(abs(spl0),abs(spl1)) :
clssrc == 1 ? clsin = abs(spl0) :
clssrc == 2 ? clsin = abs(spl1) :
clssrc == 3 ? clsin = max( abs(spl2), abs(spl3) ) :
clssrc == 4 ? clsin = abs(spl2) :
clssrc == 5 ? clsin = abs(spl3) :
clssrc == 6 ? clsin = opnin :
clsin = 0;

//opninmtr = max(opninmtr,abs(opnin));

opnflt = opnflt.float(opnin);
opnfltdir = opnflt - opnflto;
opnflto = opnflt;

clssrc <= 5 ? (
  clsflt = clsflt.float(clsin);
):(
  clsflt = opnflt;
);




_keestate1 = state;


_keestate2 = state;

/*
state == 0 || (state == -1 && gtdb < 0 && gtdb > -dbran) ? (
//  state == 0 && clssrc >= 6 ? state = -2;

  clssrc >= 6 ? (
    gtdb < 0 && opnin > opnthr ? (
      state = 1;
      keepc = 0;
    ) :
    gtdb == 0 && clsflt < clsthr ? state = -2;
  ) :

  (clsinv == 0 && clsin > clsthr) 
  || (clsinv == 1 && clsflt < clsthr) ? (
//    gtdb >= 0 && (keepc += 1) > keepspl ? (
    state = -1;
//    );
  ) :
  gtdb < 0 && opnin > opnthr ? (
    state = 1;
    keepc = 0;
  );
);
*/

state == 0 || (state == -1 && keepclsc >= keepcls && gtdb < 0 && gtdb > -dbran) ? (
//  state == 0 && clssrc >= 6 ? state = -2;

  clssrc <= 6 ? (
    (clsinv == 0 && clsin > clsthr) || (clsinv == 1 && clsflt < clsthr) ? (
      state = -1;
    );
  ) :
  gtdb == 0 ? (
    clsflt < clsthr ? state = -2;
    opnin > opnthr ? (
      state = 1;
      keepc = 0;
    );
  );
  

//  (gtdb < 0 || (gtdb == 0 && opnsrc <= 5) ) && opnin > opnthr ? (
  (gtdb < 0 || opnsrc <= 6 ) && opnin > opnthr ? (
    (prio == 1) || (prio == 0 && (state == 0 || keepclsc >= keepcls)) ? (
      state = 1;
      keepc = 0;
    );
  );
  
);


_keestate3 = state;

state == 1 ? (
  keepclsc = 0;
  opnspl == randb ? gtdb = 0 : gtdb += opnspl;
  gtdb >= 0 ? (
    gtdb = 0;
//    clssrc == opnsrc ? (
    (keepc += 1) > keepspl ? (
      clssrc >= 7 ? state = -2;
      prio == 0 || opnflt < opnthr ? state = 0;
      
//      keepc = 0;
    );
/*
    ):(
      state = 0;
    );
*/
  );
);

_keestate4 = state;


state == -1 || state == -2 ? (
  clsspl == randb ? gtdb = -randb : gtdb -= clsspl;
//  clssrc >= 6 && clsflt < clsthr ? state = -1;
  clssrc >= 7 && gtdb < 0 ? state = -1;

  gtdb <= -randb ? 
  
  gtdb <= -randb ? (
    gtdb = -randb;
    (keepclsc += 1) >= keepcls ? (
      (clsinv == 0 && clsflt < clsthr) ? state = keepc = 0;
      (clsinv == 1 && clsin > clsthr) ? state = keepc = 0;
    );
    
  );
);

_keestate5 = state;




buflen > 0 ? (
  buf2 = buf + buflen;
  
  buf[pos] = spl0;
  buf2[pos] = spl1;
  (pos += 1) >= buflen ? pos = 0;
  spl0 = buf[pos];
  spl1 = buf2[pos];
);





gt = 2^(gtdb/6);
gt > 1 ? gt = 1;
gt < 0 ? gt = 0;

spl0 *= gt;
spl1 *= gt;



/*
mtrg.meterengine(gtdb,-99,0);
op.meterengine(opnin,-99,1);
clssrc <= 5 ? cl.meterengine(clsin,-99,1);
*/




// Oscilloscope oversampling

/*
_gtst += .00001;
gtst= min(1,_gtst) - max(0,_gtst-1);
gtos = gtos.osos(gtst);
_gtst >= 2 ? _gtst = 0;
*/


gfx > 0 ? (
  buflen > 0 ? (
    posd[bufm] = spl0i;
    posd[bufm+mtrdel] = spl1i;
    posd[bufm+mtrdel*2] = spl2i;
    posd[bufm+mtrdel*3] = spl3i;
  //  posd[bufm+mtrdel*4] = gt;
    //mtrdel = 1;
    (posd += 1) >= mtrdel ? posd = 0;
    
    spl0d = posd[bufm];
    spl1d = posd[bufm+mtrdel];
    spl2d = posd[bufm+mtrdel*2];
    spl3d = posd[bufm+mtrdel*3];
  //  gtd = posd[bufm+mtrdel*4];
    
  ):(
    spl0d = spl0i;
    spl1d = spl1i;
    spl2d = spl2i;
    spl3d = spl3i;
  );

  gtd = gt;
  in1os = in1os.osos( abs(spl0d) );
  in2os = in2os.osos( abs(spl1d) );
  in3os = in3os.osos( abs(spl2d) );
  in4os = in4os.osos( abs(spl3d) );
  gtos = gtos.osos(gtd);
    
  
  opnsrc == 0 ? opninm = max(abs(spl0d),abs(spl1d)) :
  opnsrc == 1 ? opninm = abs(spl0d) :
  opnsrc == 2 ? opninm = abs(spl1d) :
  opnsrc == 3 ? opninm = max( abs(spl2d), abs(spl3d) ) :
  opnsrc == 4 ? opninm = abs(spl2d) :
  opnsrc == 5 ? opninm = abs(spl3d) :
  opninm = 0;
  
  opninmtr = max(opninmtr,abs(opninm));

  clssrc == 0 ? clsinm = max(abs(spl0d),abs(spl1d)) :
  clssrc == 1 ? clsinm = abs(spl0d) :
  clssrc == 2 ? clsinm = abs(spl1d) :
  clssrc == 3 ? clsinm = max( abs(spl2d), abs(spl3d) ) :
  clssrc == 4 ? clsinm = abs(spl2d) :
  clssrc == 5 ? clsinm = abs(spl3d) :
  clssrc == 6 ? clsinm = opninm :
  clsinm = 0;
  
  clsinmtr = max(clsinmtr,abs(clsinm));
  
//  (osmkc += 1) >= osmkmax ? (
  (bttmp = floor(beat_position - btoff)) > btposold ? (
    osmk = 1;
//    osmkc = 0;
  );
  btposold = bttmp;
);

gfxs == 0 ? (
  (gfxc += 1) > srate*2 ? gfx = 0;
):(
  gfxs = gfxc = 0;
  gfx == 0 ? (
    gfxini = 1;
    gfx = 1;
  );
);

//spl0 = spl0i;
//spl1 = spl0d;





spl2 = opnflt.hold;
spl3 = opnflt.flt;







@gfx 400 590

gfxs = 1;

//sz = 10 + max(0, (gfx_w-250)*.03 );
//areahtot-toppad > gfx_h-120 || areawtot > gfx_w * .45 ? sz -= 1 :
//areahtot-toppad < gfx_h-150 && areawtot < gfx_w * .35 ? sz += 1;

function xy(x y)(
  gfx_x = x;
  gfx_y = y;
);

gfxvals == 0 ? (
  gfxvals = 1;
  
  pad = 2;
  
//  mtrx = 50;
  
  dbran = 48;
  glrx = 10;
  
  listpad = 3;
  areapad = 6;
  dbmin = -48;
  decay = .5;
  decayspd = 12;
  
  areaxc = 150;
  
);

function setareaw()(
  closear.y+closear.h+10 > gfx_h || areawtot > gfx_wlim * .48 ? sz -= 1 :
  max(areahtot-toppad+myoff[4] + gfx_texth*6 ,closear.y+closear.h+gfx_texth*4) < gfx_h
   && areawtot < gfx_wlim * .35 ? sz += 1;
   
   sz = max(10,min(30,sz));
   sz2 = max(8,min(30,sz*.7));
 //  sz3 = (gfx_w*.5 - (openar.x + areawtot*.5)) *.45 - max(0,sz-10);
 //  sz3 = ceil( max( max(sz*2,32) , min(sz*4,sz3)) - max(0, 390-closear.x) *.1);
   sz3 = sz*2 + closear.x *.05;
   sz4 = sz3 * .4;
 
);

//gfxnoob == 0 ? gfxini = 2 :
gfxnoob <= 1 ? gfxini = 1;



gfx_w != gfx_wold || gfx_hold != gfx_h || gfxini > 0 ? (

  drawgateok = 0;
  uppanels = 1;
  willareaw = 1;

//  closechoose = 1;
  gfx_wlim = min(740,gfx_w);
  
  gfxini = 0;
  
  
  szold != sz ? (
    willareaw = 1;
    gfxini = 1;
  );
  szold = sz; 

  setareaw();

  
  gfx_setfont(1,"Verdana",ceil(sz),'b');
  gfx_setfont(2,"Verdana",ceil(sz2),'b');
  gfx_setfont(3,"Verdana",ceil(sz3),'bi');
//  gfx_setfont(4,"Verdana",ceil(sz3*2),'bio');
  gfx_setfont(4,"Verdana",ceil(sz4),'bo');
  
  
  
  
  // MAIN TITLE
  
  gfx_setimgdim(5,-1,-1); gfx_setimgdim(5,gfx_wlim,150);
  gfx_dest = 5;
  gfx_setfont(3);
  gfx_measurestr("FriGate",titw,tith);
  tits = sz3 * .1;
  //xy(titx = max(80,gfx_w*.31) , -6);
//  xy(titx = max(110, min(300, gfx_wlim*.5 - gfx_texth*.5) ) , 8-sz3*.45);
//  xy(titx = sz3*3,tity = sz);
  xy(titx = closear.x*.4,tity = sz);
  gr = .35;
  gfx_set(gr,gr-.1,gr-.2,1);
  gfx_drawstr("Fri",258,gfx_x,gfx_y);
  gfx_x = titx;
  gfx_set(gr-.2,gr,gr,1);
  gfx_drawstr("Gate",256,gfx_x,gfx_y);
  xy(titx -= tits-1 , gfx_y - tits);
  gr = .7;
  gfx_set(gr-.15,gr,gr,1);
  gfx_drawstr("Fri",258,gfx_x,gfx_y);
  gfx_x = titx;
  gr = .75;
  gfx_set(gr,gr-.12,gr-.24,1);
  gfx_drawstr("Gate",256,gfx_x,gfx_y);
  
  gfx_setfont(4);
//  xy(titx + sz , gfx_y +sz3*1.1);
  titoff = sz4 * .3;
  xy(titx + sz4*1.8 , gfx_y + sz3 * .05 - titoff );
  gr = .3;
  gfx_set(gr,gr*2,gr,1,1);
  gfx_set(0,0,0,.8,1);
  gfx_drawstr("m r e l w o o d",257,gfx_x,gfx_y);
  xy(titx + sz4*1.5 , gfx_y +sz3*.75 +titoff*2);
  gfx_drawstr("p l u g i n s",257,gfx_x,gfx_y);
  
  gfx_dest = -1;
/*
  gfx_setfont(2);
  gfx_measurestr(" Ch 1+2 ",mtrx,0);
  mtrx += 10;
  mtrh = max(10,gfx_texth*.7);
*/
  gfx_setfont(1);
  shadow = max(8,gfx_texth*.5);
  toppad = gfx_texth * 7;
//  sliknor = max(12,4+.5*gfx_texth);
  sliknor = max(12,2+.7*gfx_texth);
  
  
  
  
  
  osx = sz;
  osy = sz;
  osh = ceil(sz2*6);
//  osh2 = osh*.25;
  osh2 = osh / (min(4,num_ch));
  closear.x > 200 ?
    osw = floor( min(closear.x+closear.w-20 , gfx_wlim-osx*2) *.5)*2 :
    osw = floor( (gfx_wlim-osx*2) *.5)*2;
  osx2 = osx+osw;
  osmature = 0;
  opnthrypos = (1-(log10(opnthr)*19.93 + dbran)/dbran) *osh2;
  
//  enay = openar.y+openar.h+.75*sz;
  enay = toppad+openar.h + myoff[2] + listpad;


  // Oscilloscope
  gfx_setimgdim(6,-1,-1);
  osxpos = 1;
  gfx_setimgdim(6,osw*2,osh);
  gfx_dest = 6;
//  gfx_set(0,0,0,1,0);
//  gfx_rect(0,0,osw*2,osh);
  
  
);

_osxpos = osxpos;


function osypos(in)
  instance(ypos ypos2)(
  ypos = (1- max(0, log10(this.prev)*19.93 + dbran)/dbran) *osh2;
  gfx_line( osxpos-1 , ypos+gfx_y , osxpos-1 , osh2+gfx_y );
  ypos2 = (1- max(0, log10(in)*19.93 + dbran)/dbran) *osh2;
  gfx_line( osxpos , ypos2+gfx_y , osxpos , osh2+gfx_y );
  this.prev > opnthr ? (
    gfx_a = .5;
    gfx_line( osxpos-1 , ypos+gfx_y , osxpos-1 , opnthrypos+gfx_y );
    
  );
  in > opnthr ? (
    gfx_a = .5;
    gfx_line( osxpos , ypos2+gfx_y , osxpos , opnthrypos+gfx_y );
  );
  this.rst = 1;
  gfx_y += osh2;
  ypos;
);

// OSCILLOSCOPE

gfxsleep == 0 ? (
  gr = .2;
  gfx_set(gr,gr,gr,1);
  gfx_rect(osx-1,osy-1,osw+2,osh+2 , 0);
  
  gfx_dest = 6;
  //gfx_set(.8,.1,0,.4);
  
  osypos = (1-gtos) * osh;
  osyposprev = (1-gtos.prev) * osh;
  gtos.rst = 1;
  
  /*
  _osc += 1; 
  osypos += sin(_osc /10) *10;
  osyposprev -= sin(_osc /10) *10;
  */
  
  _sleeosw = osxpos;
  (mouse_cap > 0 && mouse_y < osy+osh) ? osxpos += 0 : osxpos += 2;
  
  osxpos >= osw && osw2nd == 0 ? (
    osw2nd = 1;
    gfx_set(0,0,0,1);
    gfx_rect(osxpos-1,0,osw,osh);
  ) :
  osxpos >= osw*2 ? (
  
    osxpos = 1;
    osw2nd = 0;
    gfx_set(0,0,0,1);
    gfx_rect(0,0,osw,osh);
  );
  
//  gfx_set(1,0,0,.3,0);
  gfx_set(.55,.01,.01,1,0);
  
  gfx_line( osxpos-1 ,0,osxpos-1,osyposprev);
  gfx_line( osxpos ,0,osxpos,osypos);
  
  osmk == 1 ? (
    gr = 1;
    gfx_set(gr,gr,gr,1,0);
    (osmkmul += 1) > 1 ? osmkmul = 0;
    gfx_line(osxpos-1,0,osxpos-1,4-2*osmkmul);
    osmk = 0;
  );
);

function colorize(id)
  instance(ina inb a b c d)(
  
  ina = opnsrc;
  inb = clssrc;
  
  ina == 0 || ina == 3 ? b = 1 : b = 0;
  a = max(1,ina-1*0);
  ina > 3 ? a -= 1;

  inb == 0 || inb == 3 ? d = 1 : d = 0;
  c = max(1,inb-1*0);
  inb > 3 ? c -= 1;
  
  id >= a && id <= (a+b) ? (
    id >= c && id <= (c+d) ? (
      gfx_set(1,1,.5,.3);
    ):(
      gfx_set(1,.5,0,.2);
    );
  ) :
  id >= c && id <= (c+d) ? (
    gfx_set(0,1,.8,.15);
  ):(
  
    id == 1 ? gfx_set(.0,.4,.0,.2,1) :
    id == 2 ? gfx_set(.2,.2,.7,.25,1) :
    id == 3 ? gfx_set(.5,.1,.6,.25,1) :
    id == 4 ? gfx_set(.6,.1,.3,.25,1);

  );
//  gfx_set(0,.8,1,.2);
//  gfx_set(.6,.3,1,.2);
);  

gfx_y = 0;
inc1.colorize(1);
in1os.osypos(in1os);
inc2.colorize(2);
in2os.osypos(in2os);
num_ch >= 3 ? (
  inc3.colorize(3);
  in3os.osypos(in3os);
);
num_ch >= 4 ? (
  inc4.colorize(4);
  in4os.osypos(in4os);
);

/*
//osxpos > osw ? (
osxpos > osw*2 -10 ? (
  gfx_set(0,1,0,1);
  gfx_line(osxpos-1,osh-(osw*2-osxpos) *.5,osxpos-1,osh);
  gfx_line(osxpos,osh-(osw*2-osxpos),osxpos,osh);
//  gfx_rect(osxpos-1,osh-5,5,5);
);
*/


gfx_dest = -1;

/*
gfx_set(.3*0,0,0,.15,1);
gfx_setfont(4);
xy(sz*2 , -sz);
gfx_drawstr("FriGate");
*/


gfx_set(1,1,1,.4,0);

osmature <= 0 ? (
  osxpos > osw ? osmature = 1;

  gfx_blit(6,1,0 , 0,0,osw,osh , osx,osy,osw,osh);

):(
  
  osxpos > osw ? (
    gfx_blit(6,1,0 , osxpos-osw,0,osw,osh , osx,osy,osw,osh);
  ):(
    gfx_blit(6,1,0 , 0,0,osxpos,osh , osx+osw-osxpos,osy,osxpos,osh);
    gfx_blit(6,1,0 , osw+osxpos,0,osw-osxpos,osh , osx,osy,osw-osxpos,osh);
  );
);

/*
gfx_set(1,1,1,1,0);
xy(0,gfx_h-osh*.5);
gfx_blit(6,.5,0); //tmp
*/

gfx_set(1,1,1,.3,1,-1);
gfx_setfont(2);
z = 0;
loop(4,
  gfx_a = .2;
  gfx_rect(osx,osy+z*osh2+1,osh2,osh2-1 , 0);
  xy(osx+osh2*.5 , osy+osh2*(.5 +z));
  gfx_a = .5;
  gfx_drawstr( sprintf(#n,"%d",z+1) , 261,gfx_x,gfx_y);
  z += 1;
);

gfx_setfont(2);
gr = .35;
gfx_set(gr,gr,gr,1,0);
xy(osx,osy*.5);
gfx_drawstr("Inputs",260,gfx_x,gfx_y);
gr = .15;
gfx_set(.55,gr,gr,1,0);
xy(osx+osw,osy*.5);
gfx_drawstr("Gate",262,gfx_x,gfx_y);

/*
xy(0,sz);
gfx_set(1,1,1,.3);
gfx_blit(5,1,0); // Main title
*/
/*
gfx_set(.5,0,0,.15,1);
gfx_setfont(4);
xy(sz*2 , -sz);
gfx_drawstr("FriGate");
*/


xy(0,0);






















function xpos(val,islog)
  instance(xpos)(
  
  islog == 0 ? xpos = mtrx+mtrw - mtrw* ((-val)/dbran);
  islog == 1 ? xpos = mtrx+mtrw - mtrw*  ( 19.93*log10(val))/(-dbran) ;
  gfx_x = xpos;
);


function meter(tit col dir thro thrc str)
  instance(val valR valdb valdbR valdecay valdecayR valc valcR rst x0 x y y0 h h0 
  xpos xposR loga thr_)(

  gfx_setfont(2);
  x0 = gfx_x;
  h = ceil( (h0 = gfx_texth) *.7 );
  y = ceil( (y0 = gfx_y) +(h0-h)*.5 );
  
  
//  val != 0 ? (
  loga == 1 ? valdb = log10(val)*19.93 : valdb = val;
  
  valdb >= valdecay ? (
    valdecay = valdb;
    valc = 0;
  ):(
//    valdecay -= min( (valdecay-valdb)*.5 , max(0,valc-1) * decayspd );
    valc > 2 ? valdecay -= (valdecay-valdb) ;
    valc += 1;
  );
//  );
  str == 1 ? (
    loga == 1 ? valdbR = log10(valR)*19.93 : valdbR = valR;
    
    valdbR >= valdecayR ? (
      valdecayR = valdbR;
      valcR = 0;
    ):(
//      valdecayR -= min( (valdecayR-valdbR)*.5 , max(0,valcR-1) * decayspd );
      valcR > 2 ? valdecayR -= (valdecayR-valdbR) ;
      valcR += 1;
    );
  );

  
  // Title
  gr = .6;
  gfx_set(gr,gr,gr,1);
//  gfx_y -= 3;
//  xy(mtrx,y-gfx_texth-pad);
  gfx_drawstr(tit,258,x0-5,y0);
  
  // Lines
  gr = .5;
  gfx_set(gr,gr,gr,1);
  
  linedb = 0;
  while(linedb > -dbran)(
    x = x0+mtrw - (-linedb/dbran) * mtrw -1;
    gfx_line(x,y-2,x,y+h+2);
    linedb -= 12;
  );
  
// Box
  gr = .1;
  gfx_set(gr,gr,gr,1);
  gfx_rect(x0,y,mtrw,h ,0);
  gr = 0;
  gfx_set(gr,gr,gr,1);
  
  gfx_rect(x0+1,y+1,mtrw-2,h-2 ,1);

  
  gfx_set(0,0,0,1);
//  gfx_rect(mtrx-pad+1,y-pad+1,mtrw+pad*2-2,mtrh+pad*2-2 ,1);
  gfx_rect(mtrx+1,y+1,mtrw-2,h-2 ,1);


  // Thr lines
  thro != -99 ? (
    thro > 0 ? thro = log10(thro) * 19.93;
    gr = .9;
    gfx_set(.8,.7,.4,.4);
    gfx_rect( xpos(thro,0) , y-3,3,h+6,1);
  );  
  thrc != -99 ? (
    thrc > 0 ? thrc = log10(thrc) * 19.93;
    gr = .9;
    gfx_set(.4,.8,.8,.4);
    gfx_rect( xpos(thrc,0) , y-3,3,h+6,1);
  );  

  // Meter action
  gr = .6;
  col == "o" ? (gr = .8; gfx_set(gr,gr*.1,gr*.0,1);) :
  col == "r" ? gfx_set(gr*.5,gr*.3,gr,1) :
  col == "g" ? gfx_set(gr*.2,gr*.9,gr*.2,1) :
  col == "b" ? gfx_set(gr*.1,gr*.5,gr,1);

  dir == 1 ? (
    str == 0 ? (
      gfx_rect(mtrx+1,y+1, (xpos = max(0, valdecay +dbran) /(dbran)  ) *(mtrw)  ,h-2 ,1);
    ):(
      gfx_rect(mtrx+1,y+1, (xpos = max(0, valdecay +dbran) /(dbran)  ) *(mtrw)  ,(h-2)*.5 ,1);
      gr = .1;
      gfx_r -= gr;
      gfx_g -= gr;
      gfx_b += gr;
      gfx_rect(mtrx+1,y+1 +(h-2)*.5, (xpos = max(0, valdecayR +dbran) /(dbran)  ) *(mtrw)  ,(h-2)*.5 ,1);
    );
  ) :
  dir == -1 ? gfx_rect(mtrx+xpos =( max(0, valdecay +dbran) /(dbran)  ) *(mtrw),y+1,mtrw-xpos,h-2 ,1);

  rst = 1;
  
  gfx_y += h +2;
  gfx_x = x0;
//  gfx_setfont(1);
);











function roundrectfill(x y w h r mode)
  instance(x y w h a dest red g b)(
  
  x = floor(x);
  y = floor(y);
  w = ceil(w);
  h = ceil(h);
  r = ceil(r);
  
  dest = gfx_dest;
  gfx_dest = 3;
  red = gfx_r;
  g = gfx_g;
  b = gfx_b;
  a = gfx_a;
  gfx_a = 1;
  gfx_setimgdim(3,-1,-1); gfx_setimgdim(3,w+areapad*21,h+1);
  
  mode <= 1 ? (
    gfx_circle(r+1 , r+1 , r , 1,0);
    gfx_circle(r+1 , h-r-1 , r , 1,0);
    gfx_circle(w-r-1 , r+1 , r , 1,0);
    gfx_circle(w-r-1 , h-r-1 , r , 1,0);
    
    gfx_rect(r+1 , 0+1 , w-r*2-2 , h-2 +1);
    gfx_rect(0+1, r+1 , w +1-2 , h-r*2-2);
  );
  mode != 1 ? (
    gfx_set(1,1,1, 1  ,0);
    gfx_roundrect(0,0,w,h,r+=1);
    
    gfx_arc(r,r,r , -1.57,0 ,1);
    gfx_arc(w-r,r,r , 0,1.57 ,1);
    gfx_arc(r,h-r,r , -3.14,-1.57 ,1);
    gfx_arc(w-r,h-r,r , 1.57,3.14 ,1);
  );
  
  gfx_dest = dest;
  gfx_a = a;
  gfx_blit(3,1,0 , 0,0,w+1,h+1 , x,y,w+1,h+1);
  gfx_set(red,g,b,a,0);
);





function list(tit t0 t1 t2 t3 t4 t5 t6 t7 t8 id)
  instance(x xc y y0 w h strw items #curstr stay chose gr)(

  
  strw = items = 0;
  t0 != 0 ? ( gfx_measurestr(t0, strw_, h); strw = max( strw_, strw ); items += 1 );
  t1 != 0 ? ( gfx_measurestr(t1, strw_, 0); strw = max( strw_, strw ); items += 1 );
  t2 != 0 ? ( gfx_measurestr(t2, strw_, 0); strw = max( strw_, strw ); items += 1 );
  t3 != 0 ? ( gfx_measurestr(t3, strw_, 0); strw = max( strw_, strw ); items += 1 );
  t4 != 0 ? ( gfx_measurestr(t4, strw_, 0); strw = max( strw_, strw ); items += 1 );
  t5 != 0 ? ( gfx_measurestr(t5, strw_, 0); strw = max( strw_, strw ); items += 1 );
  t6 != 0 ? ( gfx_measurestr(t6, strw_, 0); strw = max( strw_, strw ); items += 1 );
  t7 != 0 ? ( gfx_measurestr(t7, strw_, 0); strw = max( strw_, strw ); items += 1 );
  t8 != 0 ? ( gfx_measurestr(t8, strw_, 0); strw = max( strw_, strw ); items += 1 );
  h += listpad*1;
  
  w = strw + listpad *4;
//  x = areapad;
  x = areaxc - w*.5;
  xc = floor(x + w*.5);

  xy(xc , y=(gfx_y+areapad));
  gr = .9;
  gfx_set(gr,gr,gr,.9);
  gfx_drawstr(tit,257,gfx_x,gfx_y);
  
  y += h;
  
  slider(id) == 0 ? #curstr = t0 :
  slider(id) == 1 ? #curstr = t1 :
  slider(id) == 2 ? #curstr = t2 :
  slider(id) == 3 ? #curstr = t3 :
  slider(id) == 4 ? #curstr = t4 :
  slider(id) == 5 ? #curstr = t5 :
  slider(id) == 6 ? #curstr = t6 :
  slider(id) == 7 ? #curstr = t7 :
  slider(id) == 8 ? #curstr = t8;

  
  choose[destid] == 0 && mouse_cap > 0 && capold == 0 && mouse_x > (x+mxoff[destid]) && mouse_x < (x+w+mxoff[destid])
  && mouse_y > (y+myoff[destid]) && mouse_y < (y+h+myoff[destid]) ? (
    choose[destid] = id;
    choose.x = x;
    choose.xc = xc;
    choose.y = y;
//    choose.y0 = y0;
    choose.w = w;
    choose.h = h;
    choose.i = items;
    choose.c = 0;
//    choose.stay = 1;
    
    choose.t0 = t0;
    choose.t1 = t1;
    choose.t2 = t2;
    choose.t3 = t3;
    choose.t4 = t4;
    choose.t5 = t5;
    choose.t6 = t6;
    choose.t7 = t7;
    choose.t8 = t8;
    
  );

  gfx_set(listr,listg,listb,.95);
  roundrectfill(x,y,w,h,rc=ceil(3+gfx_texth*.2),0);
  xy(xc , y +listpad -1);
  gr = .9;
  gfx_set(gr,gr,gr,1);
  
  gfx_drawstr(#curstr, 257,gfx_x,gfx_y);

  
  areaw[destid] = max(areaw[destid] , w);
//  areah += ( gfx_y += areapad*2 ) -y ;
  areah += ( gfx_y += areapad*2 + gfx_texth ) -y +h+areapad;
  gfx_x = xc;
);


function choose(id)
  instance(x xc y y0 w h i #curstr t0 t1 t2 t3 t4 t5 t6 t7 t8 s c stay chose gr)(
  
    closechoose > 0 ? choose[id] = 0;
//  id >= destid*0 ? (
    mouse_cap > 0 ? (
      (c += 1) > 15 ? stay = 0 : stay = 1;
    );
    
  //  choose == -1 && mouse_cap == 0 ? choose = 0;
    
    y0 = max(h*.5-myoff[destid], y  -(slider(choose[destid]))*h  +1);
  
    // Shadow
    gfx_set(0,0,0,.3);
    roundrectfill(x-shadow,y0-1-shadow,w+shadow*2,h*i+shadow*2 +listpad -3 ,rc*2,1);
    // Box
    gfx_set(listr,listg,listb,1);
    roundrectfill(x,y0-1,w,h*i+listpad-3 ,rc,0);
    // Current dark
    gfx_set(0,0,0,.15);
    gfx_rect(x+1, max(y-listpad+1 , y0+(slider(choose[destid]))*h ),w-1,h-1 ,1);
      
    xy(xc , y0 +listpad-2);
    gr = .9;
    gfx_set(gr,gr,gr,1);
    i > 0 ? gfx_drawstr(t0, 257,gfx_x,gfx_y);  xy(xc , gfx_y + h);
    i > 1 ? gfx_drawstr(t1, 257,gfx_x,gfx_y);  xy(xc , gfx_y + h);
    i > 2 ? gfx_drawstr(t2, 257,gfx_x,gfx_y);  xy(xc , gfx_y + h);
    i > 3 ? gfx_drawstr(t3, 257,gfx_x,gfx_y);  xy(xc , gfx_y + h);
    i > 4 ? gfx_drawstr(t4, 257,gfx_x,gfx_y);  xy(xc , gfx_y + h);
    i > 5 ? gfx_drawstr(t5, 257,gfx_x,gfx_y);  xy(xc , gfx_y + h);
    i > 6 ? gfx_drawstr(t6, 257,gfx_x,gfx_y);  xy(xc , gfx_y + h);
    i > 7 ? gfx_drawstr(t7, 257,gfx_x,gfx_y);  xy(xc , gfx_y + h);
    i > 8 ? gfx_drawstr(t8, 257,gfx_x,gfx_y);  xy(xc , gfx_y + h);
  
//    _y0 = 
  
    mouse_x > x+mxoff[destid] && mouse_x < x+w+mxoff[destid] && mouse_y > y0+myoff[destid] && mouse_y < y0+i*h+myoff[destid] ? (
      
      // Glare
      gfx_set(1,1,1,.25,0);
      gfx_rect(x+1,y0+floor((mouse_y-myoff[destid]-y0)/h)*h,w-1,h-1);
      
      c > 1 ? (
        (stay == 1 && mouse_cap > 0 && capold == 0) ||
        (stay == 0 && mouse_cap == 0 && capold > 0) ? (
          chose = slider(choose[destid]) = floor( (mouse_y-(y0+myoff[destid])) / h );
          
          upsli();
          choose[destid] = 0;
          id == 4 ? (
            drawgateok = 0;
//            willareaw = 1;
          );
        );
      );
    ):(
      mouse_cap > 0 && capold == 0 ? choose[destid] = 0;
      mouse_cap == 0 && capold > 0 && stay == 0 ? stay = 1;
    );
//  );
);

function mou(id spd)
  instance(mi ma)(
  
  mouse_cap > 1 ? spd *= .1;
  
  mouse_cap == capold ? slider(id) += ((mouse_x-mouxold) + (mouyold-mouse_y)) * spd ;
  
  slider(id) > ma ? slider(id) = ma;
  slider(id) < mi ? slider(id) = mi;
  
//  slider_automate(slider(id));
  
  upsli();
  
  uppanels = 1;

  mouxold = mouse_x;
  mouyold = mouse_y;
  
);


function slidr(tit mi ze ma val uni id)
  instance(x y w tw y0 gr #val xpos )(
  
  gfx_measurestr(tit,tw,0);
  areaw[destid] = max(areaw[destid] , tw +areapad*2 );
  
  xy(areaxc , (y0=y=gfx_y)+areapad);
  
  id == 3 && val > 0 ? (
    gr = .4;
    gfx_set(1,gr,gr,1);
  ):(
    gr = .9;
    gfx_set(gr,gr,gr,.9);
  );
  gfx_drawstr(tit,257,gfx_x,gfx_y);
  
//  areaw = max(areaw, 30);
  
//  y += (h=gfx_texth) + areapad*3;
  y += (h=gfx_texth)*1.5 + areapad;
//  x = areaxc-areaw[destid]*.5 +areapad;
  x = floor(areaxc-areaw[destid]*.5 +sliknor*.75 );

  gr = .1;
  gfx_set(gr,gr,gr,.7);
//  gfx_rect(x,y,w=areaw[destid] - areapad*2,4);
  gfx_rect(x,y,w=areaw[destid] - sliknor*1.5,4);
  
  xpos = x + w * (slider(id)-mi)/(ma-mi);
  gfx_set(listr,listg,listb,1);
  roundrectfill(xpos-sliknor*.5,y-sliknor*.5+1,sliknor,sliknor ,sliknor * .25,0);
  
  xy(floor(areaxc+sliknor*.5), y += ceil(sliknor*.5 + areapad*.4));
  
  gr = .9;
  gfx_set(gr,gr,gr,1);
  
  (val > 0 && val < 2) ? sprintf(#val,"%.2f",val) : sprintf(#val,"%.1f",val);
  gfx_drawstr( #val , 258,gfx_x,gfx_y);
  gr = .7;
  gfx_set(gr,gr,gr,.9);
  gfx_x = floor(areaxc + sliknor);
  
  gfx_drawstr( uni , 256,gfx_x,gfx_y);
  
  this.mmxxsrc = mxoff[destid];
  
  this.ma = ma;
  this.mi = mi;
  mouse_cap > 0 && capold == 0 && mouse_x > x-sliknor+mxoff[destid] && mouse_x < x+w+sliknor+mxoff[destid] &&
  mouse_y > y0+gfx_texth+myoff[destid] && mouse_y < y+sliknor+myoff[destid] ? drag = id;
  
  drag == id ? (
//    mouse_cap > 0 && capold == 0 ? dbls += 1;
    this.mou(id, (ma-mi)/w);
    zes = ze;
  );
  
  
//  areah += ( gfx_y += areapad*2 ) -y ;
  areah += ( gfx_y += areapad + gfx_texth ) -y0 ;
  gfx_x = xc;

);  
function mtrbase(thr inv)
  instance(xm ym wm hm grm gr #val xpos)(
  
  this.inv = inv;

  xy(areaxc , ym = ceil(gfx_y));
  wm = areaw[destid] -areapad*2;
  hm = floor(max(10,gfx_texth*.6) ) ;
  
//  y += (h=gfx_texth) ;
  xm = floor( areaxc - wm*.5 );

  xl = xm + wm;
  while(xl > xm)(
    xl -= 12/(-dbmin) * wm;
    gfx_line(xl,ym-2,xl,ym+hm+1);
  );
  
  xpos = xm + wm * (1- thr/dbmin);

  gr = .15;
  gfx_set(gr,gr,gr,1,0);
  gfx_rect(xm,ym,wm,hm);
  gr = 1;
  gfx_set(gr,gr,gr,.3,0);
  inv == 0 ? (
    gfx_rect(xpos,ym,xm+wm-xpos,hm);
    gfx_set(gr,gr,gr,.6,0);
    gfx_rect(xpos,ym,xm+wm-xpos,hm,0);
  ):(
    gfx_rect(xm,ym,xpos-xm,hm);
    gfx_set(gr,gr,gr,.6,0);
    gfx_rect(xm,ym,xpos-xm,hm,0);
  );
  gfx_set(gr,gr,gr,.2,0);
  
//  areah += ( gfx_y += gfx_texth*3 ) -ym ;
  areah += ( gfx_y = ym+hm + areapad + 0*gfx_texth ) -ym ;
  gfx_x = areaxc;

);  

function mtr(in r g b id)
  instance(xmtr ymtr xm ym wm hm xposm inv)(
  gfx_dest = -1;
  
  xmtr = gfx_x;
  ymtr = gfx_y;
//  xm = floor( gfx_x + mxoff[id] );
//  ym = floor( gfx_y + myoff[id] );
  
//  xm = floor(xm);
//  ym = floor(ym);

  choose[id] == 0 ? (
    xposm = xm+1 + wm * max(0, log10(in)*19.93 -dbmin) / (-dbmin);
    gfx_set(r,g,b,.5,1);
    gfx_set(0,.4,0,1,1);
    inv == 0 ? (
      gfx_rect(xm+xmtr,ym+ymtr+1,xposm-xm,hm-2);
    ):(
      gfx_rect(xposm+xmtr,ym+ymtr+1,ceil(xm+wm-xposm)-1,hm-2);
    );
  );
  
);

function butt(tit id)
  instance(x x0 y y0 r r2 gr mx my)(

  r2 = (r = sliknor *.6) * .6;
  
  y = (y0 = gfx_y) + (h=gfx_texth)*.5 + areapad*0;
  x = floor( (x0 = areaxc-areaw[destid]*.5) + r*2 );
  
  
  gr = .15;
  gfx_set(gr,gr,gr,1);
  gfx_circle(x,y,r,1);

//  clsinv > 0 ? (
  slider(id) > 0 ? (
    gfx_set(listr,listg,listb,1);
    gfx_circle(x,y,r2,1);
    gr = .8;
    gfx_set(gr,gr,gr,1);
    gfx_circle(x,y,r2,0);
  );
  xy(x + r*2 , y);
  gr = .7;
  gfx_set(gr,gr,gr,1);
  gfx_drawstr(tit,260,gfx_x,gfx_y);
  
  mx = mouse_x - mxoff[destid]; 
  my = mouse_y - myoff[destid]; 
  mouse_cap > 0 && capold == 0 && mx > x0 && mx < x0 + (areaxc-x0)*2
  && my > y-r-2 && my < y+r+2 ? (
    (slider(id) += 1) > 1 ? slider(id) = 0;
    slider_automate(slider(id));
    upsli();
    uppanels = 1;
    
  );
  
  areah += (gfx_y += gfx_texth) - y0;
);

function areaini(x y r g b id)
  instance( panx)(
  pany = y; //tmp
  panx = x; //tmp
  gfx_setfont(1);
  destidold = destid;
  gfx_dest = destid = id;
  areaw[destid] = max( areaw[destid] , areaw[destidold] );
  mxoff[destid] = floor(x-150);
  myoff[destid] = floor(y-toppad + osy+osh);
  gfx_setimgdim(id,-1,-1);  gfx_setimgdim(id,300,gfx_h*1.5);
  xy(areaxc, floor(toppad + areapad) );
  
//  areaw = 0;
  areah = areapad;
  listr = r;
  listg = g;
  listb = b;
);


function areafin(tit mtrsrc)
  instance(x xs y w h xt yt wtit htit)(
  this._choose = choose[destid];
  choose[destid] != 0 ? choose(destid);
  areah += gfx_texth*.5 + 0*areapad;
  gfx_dest = 11;
  gfx_set(listr*.5,listg*.5,listb*.5,1);
  x = (xs = floor(areaxc-areaw[destid]*.5-areapad) ) +mxoff[destid];
  y = floor(toppad-areapad +myoff[destid]) ;
  h = areah;
  gfx_measurestr(tit,wtit,0);
  wtit = ceil(wtit + listpad *6 );
  htit = ceil(gfx_texth + listpad *2);
  xt = ceil(areaxc - wtit *.5 +mxoff[destid] );
//  yt = floor(y - gfx_texth*.5 - htit*.5 +3);
  yt = floor(y - htit*.5 );
  this.roundrectfill(x,y , w= areaw[destid]+areapad*2 , areah , sz,2);
  this.roundrectfill(xt,yt+1 , wtit , htit , htit*.5,2);
  this.roundrectfill(x,y , w,areah, sz,1);
  gr = .3;
  gfx_set(listr*gr,listg*gr,listb*gr,1);
  this.roundrectfill(xt,yt+1 , wtit , htit+1 , htit*.5-1,1);
  xy(floor(areaxc+mxoff[destid]+1),floor(y+1));
  gr = .9;
  gfx_set(gr,gr,gr,1,0);
  gfx_drawstr(tit,261,gfx_x,gfx_y);
  
  gfx_set(1,1,1,1,0);
  gfx_blit(destid,1,0 ,
  xs,0,areawtot=areaw[destid]+areapad*2+2,areahtot=areah+9*gfx_texth
  , x,myoff[destid],areawtot,areahtot);
  
);


mouse_cap > 0 && mouse_x > 0 && mouse_x < gfx_wlim &&
mouse_y > 0 && mouse_y < gfx_h ? uppanels = 1;



uppanels > 0 || openar._choose > 0 || closear._choose > 0 ? (
  uppanels = 0;
  
  gfx_setimgdim(11,-1,-1); gfx_setimgdim(11,gfx_wlim,gfx_h);
  gfx_dest = 11;
  
  openar.areaini( _areaxo = max(60 , areawtot*.5+10) ,sz+5 , .7, .5, .2, 2);
    opnsrc.list("Source","In L+R","In L","In R","Ch 3+4","Ch 3","Ch 4",0,0,0,1);
    openar.mtrbase(slider2,0);
    thr.slidr("Threshold",-48,-30,0,slider2,"dB",2);
    pre.slidr("Pre-Open",0,0,1,prems,"ms",3);
    opslo.slidr("Slope/12dB",0,.08,1,opnms,"ms",4);
    opnsrc <= 5 && clssrc <= 5 ? pri.butt("Priority",7);
  openar.areafin("Open",opninmtr);
  
  closear.areaini(floor( max(areawtot*1.5+30, min(gfx_wlim-areawtot*.5-20,600) ) ),pany , .2,.6,.6,4);

    clssrc.list("Source","In L+R","In L","In R","Ch 3+4","Ch3","Ch4","<< Follow","Duration (ms)","Note length",11);
    clssrc <= 6 ? (
      clssrc >= 3 && clssrc <= 5 && clssrc != opnsrc ? (
        closear.mtrbase(slider12,clsinv);
        clsinv.butt("Inverse",10);
        clsthr.slidr("Threshold",-48,-30,0,slider12,"dB",12);
      ):(
        closear.mtrbase(slider2+slider17,clsinv);
      );
      clskpms.slidr("Min. Open",0,.3163,1,keepms,"ms",13);
    ) :
    clssrc == 7 ? (
      clskpms.slidr("Min. Open",0,.3163,1,keepms,"ms",13);
    ):(
      clskpnt.list("Keep Open","1/1","1/2","1/4","1/8","1/16","1/32",0,0,0,14);
      clskptr.slidr("Trim",.5,1,1.5,trim,"x",15);
    );
    
    opnsrc == clssrc || clssrc >= 6 ? clshys.slidr("Hysteresis",-24,-6,0,slider17,"dB",17);
    clsslo.slidr("Slope/12dB",0,.2237,1,clsms,"ms",18);
    keepcls.slidr("Min. Closed",0,.3163,1,keepclsms,"ms",16);
    clsran.slidr("Range",0,24,60,slider19,"dB",19);
  closear.areafin("Close",clsinmtr);
  
  mtrw = closear.x - mtrx -20;
  
);



_myoff2 = myoff[2];
_mxoff2 = mxoff[2];
_myoff4 = myoff[4];
_mxoff4 = mxoff[4];

gfx_dest = -1;

//xy(0,myoff[2]+openar.y+openar.h);
//xy(closear.x-closear.w*.5-titw,myoff[2]+openar.y+openar.h+sz3);
//xy(closear.x-closear.w*.5-titw,enay+sz);
//xy(0,enay+sz4*.5);
xy(0,enay);
gfx_set(1,1,1,1,0);
gfx_blit(5,1,0); // Main title

xy(0,0);
gfx_blit(11,1,0); // Panels

_choose2 = choose[2];
_choose4 = choose[4];

xy( mxoff[2] , myoff[2]  );
openar.mtr(opninmtr, .3,1,.1 , 2);
clssrc <= 6 ? (
  xy( mxoff[4] , myoff[4]  );
  closear.mtr(clsinmtr, .3,1,.1 , 4);
);

opninmtr = max( opninmtr*decay , opninm);
clsinmtr = max( clsinmtr*decay , clsinm);







function drawgate()
  instance(gp gp2 xg1 xg2 xg3 xg4 xg14 xg18 yg1 yg2 yg3 yg4 wg hg gr x y w h r x0 y0 r0 p xv)(
  drawgateok = 1;
  
  gfx_setfont(1);
//  gp = floor(1 + gatew*sz3*.00035);
  gp = floor(2 + gatew*sz3*.0005);

//  xg1 = openar.x + openar.w +gp;
  xg1 = gp ;
//  xg4 = closear.x -gp;
//  xg4 = 182;
//  yg1 = openar.y+40;
//  yg1 = gatew*.5;
  yg1 = myoff[2] + openar.h*.4 - gatew*.01;
  yg2 = yg1 + gp*3;
//  yg4 = openar.y + openar.h -10-gp;
//  yg4 = openar.y+openar.h+myoff[2];

  xg4 = floor( (closear.x - (openar.x + openar.w)) ) -1;
  wg = xg4-xg1;
  xg2 = xg1 + wg *.5 -gp - 4;
  xg3 = xg1 + wg *.5 +1;
  xg14 = xg1 + (xg2-xg1)*.43-1;
  xg18 = xg1 + (xg2-xg1)*.85;
  yg4 = openar.h-20-gfx_texth;
  yg3 = yg4 - gp*6;
  hg = yg4-yg1;
  
  
//  gfx_setimgdim(9,-1,-1); gfx_setimgdim(9,100,201);
  gfx_setimgdim(9,-1,-1); gfx_setimgdim(9, gatew = min(220,(gfx_wlim-areawtot*2)*.5 ) ,gateh = areahtot);
  gfx_dest = 9;
  
  gr1 = .3;
  gr2 = .15;
  gr0 = (gr1+gr2)*.5;
/*  
  // Hinges
  gr = gr0;
  gfx_set(gr,gr,gr,1);
  gfx_rect(xg1-gp,yg2,gp,gp*3);
  gfx_rect(xg1-gp,yg3,gp,gp*3);
*/
  // Grid
  gr = gr2;
  gfx_set(gr,gr,gr,1);
  gfx_rect(xg1,yg1,gp,hg);
  gfx_rect(xg14+1,(yg_=yg1-gp*(.5+max(0,(gatew-50)*.03))),gp,hg_=hg+(yg1-yg_) );
  gfx_rect(xg18-5,yg1,gp,hg);
  gfx_rect(xg2,yg1-gp*1,gp,hg+gp);
//  gfx_rect(xg2,yg_,gp,hg_);
/*
  // Shadow
  gr = gr1;
  gfx_set(gr,gr,gr,1);
  gfx_rect(xg1,yg1,gp*.5,hg);
  gfx_rect(xg14+1,yg_,gp*.5,hg_);
  gfx_rect(xg18-5,yg1,gp*.5,hg);
  gfx_rect(xg2,yg_,gp*.5,hg_);
*/  
  // Horizontal
  gr = gr2;
  gfx_set(gr,gr,gr,1);
//  gfx_rect(xg1+gp,yg4-gp,wg*.5-gp-1,gp);
  gfx_rect(xg1+gp,yg4-gp,xg2-xg1-gp,gp);
  gfx_rect(xg1+gp,yg1+hg*.5-gp*2,xg2-xg1+gp*.5,gp);
  gfx_rect(xg1+gp,yg1+hg*.5+gp*2,xg2-xg1-gp,gp);
  gfx_rect(xg1+gp,yg1+gp*2,xg2-xg1-gp,gp);
/*
gr = gr1;
  gfx_set(gr,gr,gr,1);
  gfx_rect(xg1,yg4-gp*.5,wg*.5-1,gp*.5);
  gfx_rect(xg1+gp,yg1+hg*.5-gp*1.5,wg*.5-gp*2-1,gp*.5);
  gfx_rect(xg1+gp,yg1+hg*.5+gp*2.5,wg*.5-gp*2-1,gp*.5);
  gfx_rect(xg1+gp,yg1+gp*2.5,wg*.5-gp*2-1,gp*.5);
*/  
  
  // Sine
  gatew < 80 ? gp2 = gp - 2 :
  gatew < 125 ? gp2 = gp - 1 :
  gp2 = max(2,gp - 1);
//  gr = gr0;
//  gfx_set(gr,gr,gr,1);
  rc = max(1,(gp2)*.5);
  x = xg1 +rc;
  
  while(x < xg14 +gp2)(
//    y = yg1 - gp*2 * (.5- cos((x-xg1)/(xg14-xg1+gp) * 3.14)*.5 );
//    y = yg1 - gp* (2- cos((x-xg1)/(xg14-xg1+gp) * 3.14) * (1+ max(0,gatew-50)*.02) );
    y = yg1 - gp2* (1- cos((x-xg1-gp)/(xg14-xg1-gp*.5) * 3.14)) * (1+ max(0,gatew-40)*.015) ;
//    gfx_line(x,y,x,y+gp2);
  //  gfx_line(xx=xg14+(xg14-x)+gp2,y,xx,y+gp2);
    gfx_circle(x,y+rc,rc , 1);
    gfx_circle(x+(xg14-x)*2 +gp,y+rc,rc , 1);
    x += 1;
  );


  // Circle
  //r = (xg2-xg1)*.2;
  //x = xg18;
  r = max(2,xg2-xg18 );
  x0 = xg18- max(0,120-drawgate.wg) *.03 ;
  y0 = yg1 - r ;
  xv = -.1;
  p = 0;
//  loop( 22 - max(0,100-drawgate.wg) *.12,
  loop( 10 + ceil((gatew-30)*.18),
    x = x0 + r * sin(xv);
    y = y0 + r * cos(xv);
//    gfx_rect(x,y,gp,gp);
    gfx_circle(x+rc,y+rc,rc , 1);
//    xv += .25 + xv*.01;
//    xv += .12; // max w
    xv += .3 / (1+gatew*.007);
    rm = min(1, max(.2, r/4 ) );
    (xv > 1.5 && p == 0) ? (
      r -= 2 ;
//      r *= .8;
      r = max(7,r);
      x0 += 2 *rm*rm;
      y0 += 2 *rm;
      p += 1;
    );
    (xv > 3.1 && p == 1) ? (      
      r -= 3 *rm*rm*rm;
//      r *= .7;
      x0 += 2 *rm;
      y0 -= 3 *rm;
      p += 1;
    );
    (xv > 4.6 && p == 2) ? (
      r -= 2 *rm;
//      r *= .8;
      x0 -= 2 *rm;
      y0 -= 2 *rm;
      p += 1;
    );
  );

/*
  // Circle arc
  //r = (xg2-xg1)*.2;
  //x = xg18;
  x0 = x = xg18-2;
  r0 = r = max(2,xg2-x0);
  y0 = y = yg1 - r;
  xv = p = 0;
  
  loop(gp3 = gp2 +2,
    gfx_arc(x,y,r , 3.14,1.57 , 1);
    r += 1;
  );
  x += gatew * .05;
  r0 = r = max(3,xg2-x);
  loop(gp3,
    gfx_arc(x,y,r , 1.57,-.2 , 1);
    r += 1;
  );
  
  rold = r0;
  r = r0-gatew*.04;
  y -= rold-r;
  loop(gp3,
    gfx_arc(x,y,r , 0, -max(0,gatew-30)*.015 -1 , 1);
    r += 1;
  );
*/
);

/*
drawgateok == 0 ? (
  drawgate();
  sold = 0;
  willareaw = 1;
);
*/


willareaw > 0 ? (
//  areawtot == areawtotold ? willareaw = 0 :
  
  memset(areaw,areawtot-areapad*2-2  -5  ,10);
  areawtotold = areawtot;
  setareaw();
  areawtot == areawtotold && openar.w == closear.w ? willareaw = 0;
  sold = 0;
  drawgateok = 0;
);



//gatew > 30 ? (
gatew_tmp > 30 ? (
  graphena > 0 ? (
    gfx_dest = 10;
    //s = slider30;
    //s = (1- (-gtdb/dbran)/((-gtdb/dbran)+1))^2;
    //s = 1/((-gtdb*.5+1)*(-gtdb*.5+1));
    s_ = 2^(gtdb*1.6/6);
    
    s += min( .4 , abs(s_-s) ) * sign(s_-s);
    
    s != sold ? (
      gfx_setimgdim(10,-1,-1);
      gfx_setimgdim(10,gatew,gateh);
      sold = s;
    );
    gfx_set(1,1,1,1,0);
    gfx_deltablit(9,0,-20,gatew,gateh , 0,0,gatew,gateh
    , 1+.2*s+2.8*s^1.5,(.8*s+.5*s^2),0,1 ,.0,s*1/150 , 1,1);
    //gfx_deltablit(9 , 0,-20,100,gateh , 150-3*s,300,100,gateh , 1+s^1.8,s*.6,0,1 ,.0,s*1/700);
    gfx_dest = -1;
//    gatey = openar.y;
    gatey = myoff[2] + toppad;
    gatex = openar.x + openar.w ;
    
    gfx_a = .3;
/*
    z = 0;
    bt = ceil( 2 *(1+gt) ) *2;
    loop( bt,
      z == bt ? gfx_a = 1;

//      zx = max(0, (z-bt*(z>bt*.5)) /bt) * drawgate.gp;
      zx = max(0, (z/(bt*.5) - (z>bt*.5))) * drawgate.gp;
      zy = (z>bt*.5) * drawgate.gp;
      gfx_blit(10,1,0 , 0,0,gatew,gateh , gatex+zx,gatey-zy,gatew,gateh );
    );
*/    

    zy = 0;
    zx = 0;
    z = 0;
    gfx_a = 1;
    gfx_set(1,1,1,1,0);
    zxl = floor(1+ (gt*3) +.5) +2;
    gfx_a -= .05 *0* (zxl);
    loop( zxl,
//        zy > 0 && zx == floor(zxl) ? gfx_set(1,1,1,1,1);
      gfx_blit(10,1,0 , -gt*6,0,gatew,gateh
//        , gatex +zx/(zxl*.5) * drawgate.gp*.8,gatey-zy,gatew,gateh );
      , floor(gatex +zx  ) ,gatey-zy,gatew,gateh );
      
      gfx_blit(10,1,0 , -gt*5,0,gatew,gateh , closear.x-zx,gatey-zy,-gatew,gateh );
      zx -= min(.5,gt)*2;
      zy += 2-gt*2;
      gfx_set(1,1,1,.4-.2*gt,1);
    );
    
    // Hinges
    gr = .22;
    gfx_set(gr,gr,gr,1,0);
    gfx_rect(gatex,gatey+gateh*.2,hiw=7,hiw*3);
    gfx_rect(gatex,gatey+gateh*.4,hiw,hiw*3);
    gfx_rect(closear.x-hiw+1,gatey+gateh*.2,hiw,hiw*3);
    gfx_rect(closear.x-hiw+1,gatey+gateh*.4,hiw,hiw*3);
    

//    gfx_blit(10,1,0 , 0,0,gatew,gateh , gatex +drawgate.gp2,gatey-drawgate.gp2,gatew,gateh );
//    gfx_blit(10,1,0 , 0,0,gatew,gateh , closear.x-2*s+2,gatey,-gatew,gateh );
//    gfx_blit(10,1,0 , 0,0,gatew,gateh , closear.x-4*s+2+s^2,gatey,-gatew,gateh );
  );
  
  gfx_setfont(2);
  gfx_measurestr(enat="Visual",enaw,enah);
  gr = .2 +.1 *graphena;
  gfx_set(gr,gr,gr,.3+.3*graphena,0,-1);
//  ena.roundrectfill((enax=openar.x+openar.w+5),(enay = openar.y+openar.h-gfx_texth)-1, enaw+=10,enah , max(3,1+gfx_texth*.3),0);
  ena.roundrectfill((enax=openar.x+openar.w-enaw-10),enay-1, enaw+=10,enah , max(3,1+gfx_texth*.3),0);
  xy(enax+enaw*.5,enay);
  gr = .4 +.4 *graphena;
  gfx_set(gr,gr,gr,.5+.3*graphena);
  gfx_drawstr(enat,257,gfx_x,gfx_y);
  
  mpad = 3;
  mouse_cap > 0 && capold == 0 && mouse_x > enax-mpad && mouse_x < enax+enaw+mpad &&
  mouse_y > enay-mpad && mouse_y < enay+enah+mpad ? (
    (graphena += 1) > 1 ? graphena = 0;
  );
);




capold == 0 && drag > 0 ? (
  _dbls += 1;
  dbls += 1;
);

dbls > 0 ? (
  (dblc +=1) > 15 ? dbls = dblc = 0;
  dbls >= 2 ? (
    dblclk = drag;
    drag = dbls = dblc = 0;
  );
);





// MOUSE DOUBLE-CLICKS:

dblclk > 0 ? (
  slider(dblclk) = zes;
/*  
  dblclk == 2 ? slider2 = -24;
  dblclk == 3 ? slider3 = 0;
  dblclk == 4 ? slider4 = .13;
  dblclk == 12 ? slider12 = -24;
  dblclk == 13 ? slider13 = .18;
  dblclk == 17 ? slider17 = -6;
  dblclk == 18 ? slider18 = .32;
  dblclk == 19 ? slider19 = 24;
*/  
  slider_automate(slider(dblclk));
  upsli();
  
  dblclk == 3 ? (
    pdc_delay = 0;
  );    
  
  dblclk = drag = 0;
);





mouse_cap == 0 ? ( 
  drag = 0;
  closechoose = 0;
  willslimate > 0 ? (
    willslimate = 0;
    loop(15,
      slider_automate(slider(z));
      z += 1;
      z == 5 ? z = 7;
      z == 8 ? z = 10;
      z == 16 ? z = 17;
    );
  );
);

capold = mouse_cap;
gfx_wold = gfx_w;
gfx_hold = gfx_h;
gfxnoob < 10 ? gfxnoob += 1;











devmode > 0 ? (
  
  gfx_dest = -1;
  
  xy(0,gfx_h-gfx_texth);
  gfx_set(1,1,1,1,0);
  gfx_drawnumber(mouse_x,0);
  gfx_x += 10;
  gfx_drawnumber(mouse_y,0);
  gfx_x += 20;
  gfx_drawnumber(mxoff[2],0);
  gfx_x += 10;
  gfx_drawnumber(myoff[2],0);
  gfx_x += 20;
  gfx_drawnumber(mxoff[4],0);
  gfx_x += 10;
  gfx_drawnumber(myoff[4],0);

);


/* BLITS
2 Open Gate panel
3 Roundrectfill
4 Close Gate Panel
5 Main title
9 Draw Gate
10 Gate open Deltablit
11 uppanels

*/


