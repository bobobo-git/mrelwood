

// (Copyright) 2018 - mrelwood plugins
//
//  This program is a free software plugin: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This plugin is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  <https://www.gnu.org/licenses/>.

desc: Routter  1.0  [mrelwood]

slider11:-0.15<-1,0,0.01>-Volume
slider12:-0.15<-1,0,0.01>-Mix

options:no_meter



@init
ver = "1.0";

ext_noinit = 1;
ext_nodenorm = 1;
gfx_ext_retina = 1;

noob < 2 ? (
	in = 1;
	out = 2;
	move = 0;
	replace = 1;
	);

olinLtmr = olinRtmr = olorigLtmr = olorigRtmr = oloutLtmr = oloutRtmr = 20;

@serialize

store_01 = file_var(0, noob);
store_02 = file_var(0, gfx_ext_retina);

@slider

@block
noob += 1;
r = gfx_ext_retina;
r == 0 ? r = 1;

@sample

inL = 0+(in-1)*2 + inch * 8;
inR = 1+(in-1)*2 + inch * 8;
busL = spl(inL) * volv;
busR = spl(inR) * volv;

(move == 1) ? (spl(inL) = spl(inR) = 0);
(in == out) && (replace == 0) ? (mixv = 0);

outL = (0+(out-1)*2) + ouch *8;
outR = (1+(out-1)*2) + ouch *8;

origL = spl(outL);
origR = spl(outR);

(replace == 1) ? (
	spl(outL) = busL;
	spl(outR) = busR;
	):(
	spl(outL) = spl(outL) * mixv + busL;
	spl(outR) = spl(outR) * mixv + busR;
	);


mtrdecay = 20/srate +1;
mtrhold = srate * 0.1;

mtrinL_ = abs(busL);
(mtrinL_ > mtrinL) ? (
	mtrinL = mtrinL_;
	mtrinLhold = 1;
	) : (
	mtrinLhold += 1;
	mtrinLhold > (mtrhold) ? (
		mtrinL /= mtrdecay;
		);
	);
mtrinL == 0 ? mtrinL = mtrinL_;
mtrinL > 1 ? (
	olinL = 1;
	mtrinL = 1;
	):(
	olinL = 0;
	);

mtrinR_ = abs(busR);
(mtrinR_ > mtrinR) ? (
	mtrinR = mtrinR_;
	mtrinRhold = 1;
	) : (
	mtrinRhold += 1;
	mtrinRhold > (mtrhold) ? (
		mtrinR /= mtrdecay;
		);
	);
mtrinR == 0 ? mtrinR = mtrinR_;
mtrinR > 1 ? (
	olinR = 1;
	mtrinR = 1;
	):(
	olinR = 0;
	);

mtrorigL_ = abs(origL) * mixv;
(mtrorigL_ > mtrorigL) ? (
	mtrorigL = mtrorigL_;
	mtrorigLhold = 1;
	) : (
	mtrorigLhold += 1;
	mtrorigLhold > (mtrhold) ? (
		mtrorigL /= mtrdecay;
		);
	);
mtrorigL == 0 ? mtrorigL = mtrorigL_;
mtrorigL > 1 ? (
	olorigL = 1;
	mtrorigL = 1;
	):(
	olorigL = 0;
	);

mtrorigR_ = abs(origR) * mixv;
(mtrorigR_ > mtrorigR) ? (
	mtrorigR = mtrorigR_;
	mtrorigRhold = 1;
	) : (
	mtrorigRhold += 1;
	mtrorigRhold > (mtrhold) ? (
		mtrorigR /= mtrdecay;
		);
	);
mtrorigR == 0 ? mtrorigR = mtrorigR_;
mtrorigR > 1 ? (
	olorigR = 1;
	mtrorigR = 1;
	):(
	olorigR = 0;
	);

mtroutL_ = abs(spl(outL) );
(mtroutL_ > mtroutL) ? (
	mtroutL = mtroutL_;
	mtroutLhold = 1;
	) : (
	mtroutLhold += 1;
	mtroutLhold > (mtrhold) ? (
		mtroutL /= mtrdecay;
		);
	);
mtroutL == 0 ? mtroutL = mtroutL_;
mtroutL > 1 ? (
	oloutL = 1;
	mtroutL = 1;
	):(
	oloutL = 0;
	);

mtroutR_ = abs(spl(outR) );
(mtroutR_ > mtroutR) ? (
	mtroutR = mtroutR_;
	mtroutRhold = 1;
	) : (
	mtroutRhold += 1;
	mtroutRhold > (mtrhold) ? (
		mtroutR /= mtrdecay;
		);
	);
mtroutR == 0 ? mtroutR = mtroutR_;
mtroutR > 1 ? (
	oloutR = 1;
	mtroutR = 1;
	):(
	oloutR = 0;
	);








@gfx 423*r 145*r



gfx_set(0.2 , 0.1 , 0 , 0.5);
gfx_gradrect(0,0,gfx_w,gfx_h , 0.2,0.1,0,0.5 , 0,0,0,0.3/gfx_w , 0,0,0,-0.42/gfx_h);

gfx_setfont(1 , "Trebuchet MS" , 12*r);
gfx_setfont(2 , "Trebuchet MS" , 13*r);
gfx_setfont(3 , "Trebuchet MS" , 20*r, 'ib');
gfx_setfont(4 , "Trebuchet MS" , 15*r, 'i');
gfx_setfont(5 , "Trebuchet MS" , 10*r);

// Title
//gfx_set(0.9,0.7,0.5,0.32,0);
gfx_set(0.8,0.6,0.1,0.3);
gfx_setfont(4);
gfx_x = 155*r - gfx_texth * 2;
gfx_y = 141*r - gfx_texth * 1.1;
gfx_drawstr("[mrelwood]");
gfx_setfont(3);


gfx_x = 297*r - (w1 + w2 + w3) *0.5;
gfx_y = 142*r - gfx_texth;
tit1 = "Routter";
tit2 = " ";
gfx_measurestr(tit1, w1 ,h1);
gfx_drawstr(tit1);
gfx_setfont(4);
gfx_y += gfx_texth * 0.2;
gfx_measurestr(tit2, w2 ,h2);
gfx_drawstr(tit2);
gfx_measurestr(ver, w3, h3);
gfx_drawstr(ver);


function button(x y str) (
	gfx_setfont(2);
	gfx_x = x;
	gfx_y = y;
	gfx_set(1,0.7,0,0.8,0);
	gfx_measurestr(str, strw, strh);
	strw += strh/2 ;
	strh *= 1;
//     gfx_a = ch;
	gfx_rect(x,y, strw,strh ,0,0);
	mx1 = x;
	mx2 = x+strw;
	my1 = y;
	my2 = y+strh;
	mouse_cap > 0 ? (
		(mouse_x > x) && (mouse_x < x + strw) && (mouse_y > y) && (mouse_y < y + strh) ? (
			mou = 1;
			);
		):(
		mou = 0;
		);
	gfx_y += strh * 0.0;
	gfx_x += strh * 0.3;
	gfx_drawstr(str);
	);



pad = 10*r;
gfx_x = inchx1 = pad;
gfx_y = inchy1 = pad/2;
gfx_setfont(1);
gfx_set(0.8,0.7,0.5,0.9,0);
gfx_drawstr("Input channels");
gfx_measurestr("Input channels", inchw, inchh);

x = buttx1 = 30*r;
y = 30*r;
h = 25*r;
inch == 0 ? (
	button(x,y," 1 + 2 ");
	mou1 = mou; mou = 0;
	button(x,y+h*1," 3 + 4 " );
	mou2 = mou; mou = 0;
	button(x,y+h*2," 5 + 6 ");
	mou3 = mou; mou = 0;
	button(x,y+h*3," 7 + 8 ");
	mou4 = mou; mou = 0;
	):(
	button(x,y," 9 + 10");
	mou1 = mou; mou = 0;
	button(x,y+h*1,"11 + 12" );
	mou2 = mou; mou = 0;
	button(x,y+h*2,"13 + 14");
	mou3 = mou; mou = 0;
	button(x,y+h*3,"15 + 16");
	mou4 = mou; mou = 0;
	);

// Input meter
mtrh = 3.7*h;
mtrr = 30;
mtryL = y + (1-mtrinL^0.4) * mtrh;
mtryR = y + (1-mtrinR^0.4) * mtrh;
mtrx1 = 8*r;
mtrw = 5*r;
mtrx2 = mtrx1 + mtrw + 2*r;
mtry2 = y + mtrh;
(olinL == 1) ? olinLtmr = 0;
(olinLtmr < 10) ? (
	olinLtmr += 1;
	gfx_set(1,0,0,0.9,0);
	):(
	gfx_set(0.8,0.5,0.1,0.3,0);
	);
gfx_rect(mtrx1,mtryL , mtrw , mtry2-mtryL);
(olinR == 1) ? olinRtmr = 0;
(olinRtmr < 10) ? (
	olinRtmr += 1;
	gfx_set(1,0,0,0.9,0);
	):(
	gfx_set(0.8,0.5,0.1,0.3,0);
	);
gfx_rect(mtrx2,mtryR , mtrw , mtry2-mtryR);
gfx_x = mtrx1 +r;
gfx_y = mtry2;
(olinLtmr < 10) ? gfx_set(1,0,0,0.9,0);
gfx_drawstr("in");

// Orig meter
mtryL = y + (1-mtrorigL^0.4) * mtrh;
mtryR = y + (1-mtrorigR^0.4) * mtrh;
mtrx1 = 378*r;
mtrx2 = mtrx1 + mtrw + 2*r;
(olorigL == 1) ? olorigLtmr = 0;
(olorigLtmr < 10) ? (
	olorigLtmr += 1;
	gfx_set(1,0,0,0.9,0);
	):(
	gfx_set(0.8,0.5,0.1,0.3,0);
	);
gfx_rect(mtrx1,mtryL , mtrw , y + mtrh-mtryL);
(olorigR == 1) ? olorigRtmr = 0;
(olorigRtmr < 10) ? (
	olorigRtmr += 1;
	gfx_set(1,0,0,0.9,0);
	):(
	gfx_set(0.8,0.5,0.1,0.3,0);
	);
gfx_rect(mtrx2,mtryR , mtrw , y + mtrh-mtryR);
gfx_x = mtrx1 -7*r;
gfx_y = mtry2;
(olorigLtmr < 10) ? gfx_set(1,0,0,0.9,0);

gfx_drawstr("orig");


// Sum meter
mtryL = y + (1-mtroutL^0.4) * mtrh;
mtryR = y + (1-mtroutR^0.4) * mtrh;
mtrx1 = 400*r;
mtrx2 = mtrx1 + mtrw + 2*r;
(oloutL == 1) ? oloutLtmr = 0;
(oloutLtmr < 10) ? (
	oloutLtmr += 1;
	gfx_set(1,0,0,0.9,0);
	):(
	gfx_set(0.8,0.6,0.3,0.4,0);
	);
gfx_rect(mtrx1,mtryL , mtrw , y + mtrh-mtryL);
(oloutL == 1) ? oloutLtmr = 0;
(oloutLtmr < 10) ? (
	oloutLtmr += 1;
	gfx_set(1,0,0,0.9,0);
	):(
	gfx_set(0.8,0.6,0.3,0.4,0);
	);
gfx_rect(mtrx2,mtryR , mtrw , y + mtrh-mtryR);
gfx_x = mtrx1 -2*r;
gfx_y = mtry2;
(oloutLtmr < 10) ? gfx_set(1,0,0,0.9,0);

gfx_drawstr("out");




gfx_set(0.8,0.7,0.5,0.4,1);
gfx_rect(x - pad/2 , pad*2.5 + (in-1) * h , strw + pad , strh +pad , 1,1);
gfx_set(0.7,0.6,0.2,0.9,0);



volx = (buttx1 + 75*r)  ;





mx2 = volx + pad *0;


x = mx2 + pad * 3.3;
y = 55*r;
h = 25*r;
button(x,y,"Copy");
mou11 = mou; mou = 0;
button(x,y+h,"Move");
mou12 = mou; mou = 0;

gfx_set(0.8,0.7,0.5,0.4,1);
gfx_rect(x - pad/2 , pad*2.5 + (move+1) * h , strw + pad , strh +pad , 1,1);
gfx_set(0.8,0.7,0.5,0.9,0);



gfx_set(0.8,0.7,0.5,0.9);
gfx_x = ouchx1 = 190*r;
gfx_y = ouchy1 = pad/2;
gfx_setfont(1);
gfx_drawstr("To channels");
gfx_measurestr("To channels", ouchw, ouchh);
x = 200*r;
y = 30*r;
h = 25*r;
ouch == 0 ? (
	button(x,y," 1 + 2 " );
	mou21 = mou; mou = 0;
	button(x,y+h*1," 3 + 4 " );
	mou22 = mou; mou = 0;
	button(x,y+h*2," 5 + 6 ");
	mou23 = mou; mou = 0;
	button(x,y+h*3," 7 + 8 ");
	mou24 = mou; mou = 0;
	):(
	button(x,y," 9 + 10" );
	mou21 = mou; mou = 0;
	button(x,y+h*1,"11 + 12" );
	mou22 = mou; mou = 0;
	button(x,y+h*2,"13 + 14");
	mou23 = mou; mou = 0;
	button(x,y+h*3,"15 + 16");
	mou24 = mou; mou = 0;
	);

gfx_set(0.8,0.7,0.5,0.4,1);
gfx_rect(x - pad/2 , pad*2.5 + (out-1) * h , strw + pad , strh +pad , 1,1);
gfx_set(0.8,0.7,0.5,0.9,0);



x = 270*r;
y = 55*r;
h = 25*r;
button(x,y," Merge ");
mou31 = mou; mou = 0;
button(x,y+h,"Replace");
mou32 = mou; mou = 0;

gfx_set(0.8,0.7,0.5,0.4,1);
(in == out) ? (gfx_a = 0.1);
gfx_rect(x - pad/2 , pad*2.5 + (replace+1) * h , strw + pad , strh +pad , 1,1);
gfx_set(0.8,0.7,0.5,0.9,0);


mixx = (mx2 + pad*3)  ;



mou1 == 1 ? in = 1;
mou2 == 1 ? in = 2;
mou3 == 1 ? in = 3;
mou4 == 1 ? in = 4;

mou11 == 1 ? move = 0;
mou12 == 1 ? move = 1;

mou21 == 1 ? out = 1;
mou22 == 1 ? out = 2;
mou23 == 1 ? out = 3;
mou24 == 1 ? out = 4;

mou31 == 1 ? replace = 0;
mou32 == 1 ? replace = 1;

mouse_cap > 0 ? (
	(mouse_x > volx-pad) && (mouse_x < volx + pad*1.5) && (mouse_y > voly) && (mouse_y < voly + pad*1.5) ? (
		cap1 == 0 ? (
			cap = 1;
			cap1 = 1;
			);
		);
	(mouse_x > mixx-pad) && (mouse_x < mixx + pad*1.5) && (mouse_y > mixy) && (mouse_y < mixy + pad*1.5) ? (
		cap1 == 0 ? (
			cap = 2;
			cap1 = 2;
			);
		);
	(mouse_x > inchx1) && (mouse_x < inchx1+inchw) && (mouse_y > inchy) && (mouse_y < inchy+inchh) ? (
		cap1 == 0 ? (
			cap = 3;
			cap1 = 3;
			);
		);
	(mouse_x > ouchx1) && (mouse_x < ouchx1+ouchw) && (mouse_y > ouchy) && (mouse_y < ouchy+ouchh) ? (
		cap1 == 0 ? (
			cap = 4;
			cap1 = 4;
			);
		);
	);

mouse_cap != mouse_capold ? (
	(mouse_cap > 0) && (mouse_capold > 0) ? cap = drag;
	mouse_cap > 1 ? (
		precise = 10;
		);
	);
mouse_cap == 1 ? precise = 1;

cap > 0 ? (
	starty = mouse_y;
	drag1 = cap;
	cap = 0;
	click == 0 ? click = 1;
	cap > 2 ? drag = cap1;
	);

click > 0 ? (
	(mouse_capold != mouse_cap) ? (click += 1);
	clicktimer += 1;
	clicktimer > 15 ? (
		clicktimer = click = 0;
		);
	(click >= 4) && (mouse_cap == 0) ? (
		dblclk = drag;
		);
	);
mouse_capold = mouse_cap;
	
click == 0 ? (dblclk = sglclk = 0);


dblclk == 1 ? (
	drag = 0;
	slider11 == -0.15 ? slider11 = -0.3 : slider11 = -0.15;
	);
dblclk == 2 ? (
	drag = 0;
	slider12 == -0.15 ? slider12 = -0.3 : slider12 = -0.15;
	);
dblclk == 3 ? (
	inch == 0 ? inch = 1 : inch = 0;
	drag = 0;
	);
dblclk == 4 ? (
	ouch == 0 ? ouch = 1 : ouch = 0;
	drag = 0;
	);


travel = (starty - mouse_y) / (precise);

drag1 == 1 ? (
	start = slider11;
	drag = 1;
	drag1 = 0;
	);
drag1 == 2 ? (
	start = slider12;
	drag = 2;
	drag1 = 0;
	);
drag1 == 3 ? (
	drag = 3;
	drag1 = 0;
	);
drag1 == 4 ? (
	drag = 4;
	drag1 = 0;
	);



drag == 1 ? (
	slider11 = start + (travel/volh);
	slider11 > 0 ? slider11 = 0;
	slider11 < -1 ? slider11 = -1;
	);
drag == 2 ? (
	slider12 = start + (travel/volh) ;
	slider12 > 0 ? slider12 = 0;
	slider12 < -1 ? slider12 = -1;
	);



(mouse_cap == 0) && (click == 0) ? (drag = cap1 = 0);


gfx_set(0.8,0.7,0.5,0.9,0);

// Volume reading
slider11 > -0.3 ? (
	vol = -6 + (slider11+0.3)/0.3 * 12;
	):(
	vol = -5.7 - ((-slider11-0.3)/0.7 *0.92 +0.08)^2 * 54.4;
	);
vol = ceil(vol*10) /10;
volv = 2^(vol/6);
sprintf(voltxt , "%f.0", vol);
gfx_measurestr(voltxt, voltxtw , voltxth);
gfx_measurestr("0", zerow , 0);
gfx_x = volx + zerow *8.5 -voltxtw;
gfx_y = pad *1.5;
vol < 0 ? (gfx_drawnumber(vol -0.01,1)):(gfx_drawnumber(vol +0.01,1));
gfx_drawstr(" dB");

// Volume slider
volr = 100;
volpos = -slider11;
gfx_x = x = volx;
gfx_y = pad *3;
//volh = min(150*r , max( 70*r , (gfx_h -pad*3 )* 0.8) );
volh = 90*r;
voly = gfx_y + volpos * volh;
gfx_set(0.8,0.6,0.1,0.2);
gfx_rect(gfx_x,gfx_y , pad/2, volh + pad*1.5 );
gfx_set(0.8,0.7,0.3,0.8);
gfx_rect(gfx_x-pad*1, voly , pad*2.5 , pad*1.5);



gfx_set(0.8,0.7,0.5,0.9,0);

gfx_a -= replace * 0.5;
(in == out) ? (gfx_a = 0.3);

// mix reading
//mix = (slider12/mixr *0.8 +0.2)^2 * slider12;
slider12 > -0.3 ? (
	mix = -6 + (slider12+0.3)/0.3 * 12;
	):(
	mix = -5.7 - ((-slider12-0.3)/0.7 *0.92 +0.08)^2 * 54.4;
	);
mix = ceil(mix*10) /10;
mixv = 2^(mix/6);
sprintf(mixtxt , "%f.0", mix);
gfx_measurestr(mixtxt, mixtxtw , mixtxth);
//gfx_measurestr("0", zerow , 0);
gfx_x = mixx  + zerow *7.5 -mixtxtw;
gfx_y = pad *1.5;
mix < 0 ? (gfx_drawnumber(mix -0.01,1)):(gfx_drawnumber(mix +0.01,1));
gfx_drawstr(" dB");

/*
orig = "Orig  ";
mixtxtmax = "-60.0";
sprintf(origtxt , "%c", orig);
gfx_measurestr(orig, origtxtw , origtxth);
gfx_measurestr(mixtxtmax, mixtxtmaxw , 0);
gfx_x = mixx + pad - origtxtw - mixtxtmaxw;
gfx_drawstr(orig);
*/
gfx_setfont(5);
orig = "Original";
mixtxtmax = "-60.0";
sprintf(origtxt , "%c", orig);
gfx_measurestr(orig, origtxtw , origtxth);
gfx_measurestr(mixtxtmax, mixtxtmaxw , 0);
gfx_x = mixx + pad*2 - origtxtw;
gfx_y = pad/4;
gfx_drawstr(orig);





// mix slider
mixr = 100;
mixpos = - slider12 ;
gfx_x = mixx;
gfx_y = pad *3;
//mixh = min(150*r , max( 70*r , (gfx_h -pad*3 )* 0.8) );
mixh = 90*r;
mixy = gfx_y + mixpos * mixh;
gfx_set(0.8,0.6,0.1,0.2);
gfx_a -= replace * 0.1;
(in == out) ? (gfx_a = 0.3);
gfx_rect(gfx_x,gfx_y , pad/2, mixh + pad*1.5 );
gfx_set(0.8,0.7,0.3,0.8);
gfx_a -= replace * 0.5;;
(in == out) ? (gfx_a = 0.3);
gfx_rect(gfx_x-pad*1, mixy , pad*2.5 , pad*1.5);









